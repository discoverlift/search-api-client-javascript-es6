/*
 * Search API
 * This is the API for getting search results.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UpliftSearchClientJavascript);
  }
}(this, function(expect, UpliftSearchClientJavascript) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UpliftSearchClientJavascript.SuggestApi();
  });

  describe('(package)', function() {
    describe('SuggestApi', function() {
      describe('suggest', function() {
        it('should call suggest successfully', function(done) {
          // TODO: uncomment, update parameter values for suggest call and complete the assertions
          /*
          var catalogId = "catalogId_example";
          var domainId = "domainId_example";
          var suggestRequest = new UpliftSearchClientJavascript.SuggestRequest();
          suggestRequest.suggestParams = new UpliftSearchClientJavascript.SuggestParams();
          suggestRequest.suggestParams.keyphrase = "";
          suggestRequest.suggestParams.suggestionType = "completion";
          suggestRequest.suggestParams.suggestionSource = new UpliftSearchClientJavascript.SuggestParamsSuggestionSource();
          suggestRequest.suggestParams.suggestionSource.sourceName = "recentSearchesByUser";
          suggestRequest.suggestParams.suggestionSource.attributeName = "";
          suggestRequest.suggestParams.language = new UpliftSearchClientJavascript.Language();
          suggestRequest.suggestParams.highlightParams = new UpliftSearchClientJavascript.SuggestHighlightParams();
          suggestRequest.suggestParams.highlightParams.preTag = "";
          suggestRequest.suggestParams.highlightParams.postTag = "";
          suggestRequest.suggestParams.paginationParams = new UpliftSearchClientJavascript.PaginationParams();
          suggestRequest.suggestParams.paginationParams.hitsPerPage = 0;
          suggestRequest.suggestParams.paginationParams.page = 0;
          suggestRequest.requestParams = new UpliftSearchClientJavascript.RequestParams();
          suggestRequest.requestParams.returnParams = false;
          suggestRequest.requestParams.returnRankingExplanation = false;

          instance.suggest(catalogId, domainId, suggestRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UpliftSearchClientJavascript.SuggestResponse);
            expect(data.numResults).to.be.a('number');
            expect(data.numResults).to.be(0);
            expect(data.numPages).to.be.a('number');
            expect(data.numPages).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(UpliftSearchClientJavascript.Document);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.score).to.be.a('number');
                expect(data.score).to.be(0.0);
                {
                  let dataCtr = data.highlights;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(UpliftSearchClientJavascript.HighlightResponse);
                    expect(data.fieldName).to.be.a('string');
                    expect(data.fieldName).to.be("");
                    {
                      let dataCtr = data.highlightText;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
    
                          }
                }
                expect(data.attributes).to.be.a(Object);
                expect(data.attributes).to.be();
                expect(data.rankingExplanation).to.be.a(Object);
                expect(data.rankingExplanation).to.be();

                      }
            }
            expect(data.performance).to.be.a(UpliftSearchClientJavascript.QueryPerformance);
                  expect(data.performance.processingTime).to.be.a('number');
              expect(data.performance.processingTime).to.be(0);
              expect(data.performance.timeOut).to.be.a('boolean');
              expect(data.performance.timeOut).to.be(false);
            expect(data.suggestParams).to.be.a(UpliftSearchClientJavascript.SuggestParams);
                  expect(data.suggestParams.keyphrase).to.be.a('string');
              expect(data.suggestParams.keyphrase).to.be("");
              expect(data.suggestParams.suggestionType).to.be.a('string');
              expect(data.suggestParams.suggestionType).to.be("completion");
              expect(data.suggestParams.suggestionSource).to.be.a(UpliftSearchClientJavascript.SuggestParamsSuggestionSource);
                    expect(data.suggestParams.suggestionSource.sourceName).to.be.a('string');
                expect(data.suggestParams.suggestionSource.sourceName).to.be("recentSearchesByUser");
                expect(data.suggestParams.suggestionSource.attributeName).to.be.a('string');
                expect(data.suggestParams.suggestionSource.attributeName).to.be("");
              expect(data.suggestParams.language).to.be.a(UpliftSearchClientJavascript.Language);
                  expect(data.suggestParams.highlightParams).to.be.a(UpliftSearchClientJavascript.SuggestHighlightParams);
                    expect(data.suggestParams.highlightParams.preTag).to.be.a('string');
                expect(data.suggestParams.highlightParams.preTag).to.be("");
                expect(data.suggestParams.highlightParams.postTag).to.be.a('string');
                expect(data.suggestParams.highlightParams.postTag).to.be("");
              expect(data.suggestParams.paginationParams).to.be.a(UpliftSearchClientJavascript.PaginationParams);
                    expect(data.suggestParams.paginationParams.hitsPerPage).to.be.a('number');
                expect(data.suggestParams.paginationParams.hitsPerPage).to.be(0);
                expect(data.suggestParams.paginationParams.page).to.be.a('number');
                expect(data.suggestParams.paginationParams.page).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
