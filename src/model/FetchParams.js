/**
 * Catalog API
 * This is the API for retrieving items from your catalog.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FetchParams model module.
 * @module model/FetchParams
 * @version 1.2.2
 */
class FetchParams {
    /**
     * Constructs a new <code>FetchParams</code>.
     * @alias module:model/FetchParams
     * @param attributesToRetrieve {Array.<String>} List of attributes to return for each document. By default, returns all attributes. Returning all attributes can increase response size and latency.
     * @param fieldName {String} This field will be used to match the 'fieldValue'
     * @param fieldValue {String} This value will be used to match in 'fieldName'
     */
    constructor(attributesToRetrieve, fieldName, fieldValue) { 
        
        FetchParams.initialize(this, attributesToRetrieve, fieldName, fieldValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributesToRetrieve, fieldName, fieldValue) { 
        obj['attributesToRetrieve'] = attributesToRetrieve;
        obj['fieldName'] = fieldName;
        obj['fieldValue'] = fieldValue;
    }

    /**
     * Constructs a <code>FetchParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FetchParams} obj Optional instance to populate.
     * @return {module:model/FetchParams} The populated <code>FetchParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FetchParams();

            if (data.hasOwnProperty('attributesToRetrieve')) {
                obj['attributesToRetrieve'] = ApiClient.convertToType(data['attributesToRetrieve'], ['String']);
            }
            if (data.hasOwnProperty('fieldName')) {
                obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
            }
            if (data.hasOwnProperty('fieldValue')) {
                obj['fieldValue'] = ApiClient.convertToType(data['fieldValue'], 'String');
            }
        }
        return obj;
    }


}

/**
 * List of attributes to return for each document. By default, returns all attributes. Returning all attributes can increase response size and latency.
 * @member {Array.<String>} attributesToRetrieve
 */
FetchParams.prototype['attributesToRetrieve'] = undefined;

/**
 * This field will be used to match the 'fieldValue'
 * @member {String} fieldName
 * @default 'id'
 */
FetchParams.prototype['fieldName'] = 'id';

/**
 * This value will be used to match in 'fieldName'
 * @member {String} fieldValue
 */
FetchParams.prototype['fieldValue'] = undefined;






export default FetchParams;

