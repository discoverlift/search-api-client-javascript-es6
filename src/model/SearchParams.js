/**
 * Catalog API
 * This is the API for retrieving items from your catalog.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FacetParams from './FacetParams';
import PaginationParams from './PaginationParams';
import PersonalizationParams from './PersonalizationParams';
import RankingParams from './RankingParams';
import SearchHighlightParams from './SearchHighlightParams';

/**
 * The SearchParams model module.
 * @module model/SearchParams
 * @version 1.2.2
 */
class SearchParams {
    /**
     * Constructs a new <code>SearchParams</code>.
     * @alias module:model/SearchParams
     * @param attributesToRetrieve {Array.<String>} List of attributes to return for each document. By default, returns all attributes. Returning all attributes can increase response size and latency.
     * @param language {String} Language iso code
     * @param paginationParams {module:model/PaginationParams} 
     * @param rankingParams {module:model/RankingParams} 
     * @param personalizationParams {module:model/PersonalizationParams} 
     */
    constructor(attributesToRetrieve, language, paginationParams, rankingParams, personalizationParams) { 
        
        SearchParams.initialize(this, attributesToRetrieve, language, paginationParams, rankingParams, personalizationParams);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributesToRetrieve, language, paginationParams, rankingParams, personalizationParams) { 
        obj['attributesToRetrieve'] = attributesToRetrieve;
        obj['language'] = language;
        obj['paginationParams'] = paginationParams;
        obj['rankingParams'] = rankingParams;
        obj['personalizationParams'] = personalizationParams;
    }

    /**
     * Constructs a <code>SearchParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchParams} obj Optional instance to populate.
     * @return {module:model/SearchParams} The populated <code>SearchParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchParams();

            if (data.hasOwnProperty('keyphrase')) {
                obj['keyphrase'] = ApiClient.convertToType(data['keyphrase'], 'String');
            }
            if (data.hasOwnProperty('attributesToRetrieve')) {
                obj['attributesToRetrieve'] = ApiClient.convertToType(data['attributesToRetrieve'], ['String']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('facets')) {
                obj['facets'] = FacetParams.constructFromObject(data['facets']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], 'String');
            }
            if (data.hasOwnProperty('highlightParams')) {
                obj['highlightParams'] = SearchHighlightParams.constructFromObject(data['highlightParams']);
            }
            if (data.hasOwnProperty('paginationParams')) {
                obj['paginationParams'] = PaginationParams.constructFromObject(data['paginationParams']);
            }
            if (data.hasOwnProperty('rankingParams')) {
                obj['rankingParams'] = RankingParams.constructFromObject(data['rankingParams']);
            }
            if (data.hasOwnProperty('personalizationParams')) {
                obj['personalizationParams'] = PersonalizationParams.constructFromObject(data['personalizationParams']);
            }
        }
        return obj;
    }


}

/**
 * Query keyphrase. Empty keyphrase means return all documents.
 * @member {String} keyphrase
 */
SearchParams.prototype['keyphrase'] = undefined;

/**
 * List of attributes to return for each document. By default, returns all attributes. Returning all attributes can increase response size and latency.
 * @member {Array.<String>} attributesToRetrieve
 */
SearchParams.prototype['attributesToRetrieve'] = undefined;

/**
 * Language iso code
 * @member {String} language
 */
SearchParams.prototype['language'] = undefined;

/**
 * @member {module:model/FacetParams} facets
 */
SearchParams.prototype['facets'] = undefined;

/**
 * Filters for search. Follow same language as Algolia (https://www.algolia.com/doc/api-reference/api-parameters/filters/). Implemented using pyparse (https://stackoverflow.com/questions/11133339/parsing-a-complex-logical-expression-in-pyparsing-in-a-binary-tree-fashion)
 * @member {String} filters
 */
SearchParams.prototype['filters'] = undefined;

/**
 * @member {module:model/SearchHighlightParams} highlightParams
 */
SearchParams.prototype['highlightParams'] = undefined;

/**
 * @member {module:model/PaginationParams} paginationParams
 */
SearchParams.prototype['paginationParams'] = undefined;

/**
 * @member {module:model/RankingParams} rankingParams
 */
SearchParams.prototype['rankingParams'] = undefined;

/**
 * @member {module:model/PersonalizationParams} personalizationParams
 */
SearchParams.prototype['personalizationParams'] = undefined;






export default SearchParams;

