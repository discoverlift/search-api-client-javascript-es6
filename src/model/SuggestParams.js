/*
 * Search API
 * This is the API for getting search results.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Language', 'model/PaginationParams', 'model/SuggestHighlightParams', 'model/SuggestParamsSuggestionSource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Language'), require('./PaginationParams'), require('./SuggestHighlightParams'), require('./SuggestParamsSuggestionSource'));
  } else {
    // Browser globals (root is window)
    if (!root.UpliftSearchClientJavascript) {
      root.UpliftSearchClientJavascript = {};
    }
    root.UpliftSearchClientJavascript.SuggestParams = factory(root.UpliftSearchClientJavascript.ApiClient, root.UpliftSearchClientJavascript.Language, root.UpliftSearchClientJavascript.PaginationParams, root.UpliftSearchClientJavascript.SuggestHighlightParams, root.UpliftSearchClientJavascript.SuggestParamsSuggestionSource);
  }
}(this, function(ApiClient, Language, PaginationParams, SuggestHighlightParams, SuggestParamsSuggestionSource) {
  'use strict';

  /**
   * The SuggestParams model module.
   * @module model/SuggestParams
   * @version 1.1.0
   */

  /**
   * Constructs a new <code>SuggestParams</code>.
   * @alias module:model/SuggestParams
   * @class
   * @param keyphrase {String} Query keyphrase. Empty keyphrase returns no result.
   * @param suggestionType {module:model/SuggestParams.SuggestionTypeEnum} Type of suggestion to be returned
   * @param suggestionSource {module:model/SuggestParamsSuggestionSource} 
   * @param language {module:model/Language} 
   */
  var exports = function(keyphrase, suggestionType, suggestionSource, language) {
    this.keyphrase = keyphrase;
    this.suggestionType = suggestionType;
    this.suggestionSource = suggestionSource;
    this.language = language;
  };

  /**
   * Constructs a <code>SuggestParams</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SuggestParams} obj Optional instance to populate.
   * @return {module:model/SuggestParams} The populated <code>SuggestParams</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('keyphrase'))
        obj.keyphrase = ApiClient.convertToType(data['keyphrase'], 'String');
      if (data.hasOwnProperty('suggestionType'))
        obj.suggestionType = ApiClient.convertToType(data['suggestionType'], 'String');
      if (data.hasOwnProperty('suggestionSource'))
        obj.suggestionSource = SuggestParamsSuggestionSource.constructFromObject(data['suggestionSource']);
      if (data.hasOwnProperty('language'))
        obj.language = Language.constructFromObject(data['language']);
      if (data.hasOwnProperty('highlightParams'))
        obj.highlightParams = SuggestHighlightParams.constructFromObject(data['highlightParams']);
      if (data.hasOwnProperty('paginationParams'))
        obj.paginationParams = PaginationParams.constructFromObject(data['paginationParams']);
    }
    return obj;
  }

  /**
   * Query keyphrase. Empty keyphrase returns no result.
   * @member {String} keyphrase
   */
  exports.prototype.keyphrase = undefined;

  /**
   * Type of suggestion to be returned
   * @member {module:model/SuggestParams.SuggestionTypeEnum} suggestionType
   */
  exports.prototype.suggestionType = undefined;

  /**
   * @member {module:model/SuggestParamsSuggestionSource} suggestionSource
   */
  exports.prototype.suggestionSource = undefined;

  /**
   * @member {module:model/Language} language
   */
  exports.prototype.language = undefined;

  /**
   * @member {module:model/SuggestHighlightParams} highlightParams
   */
  exports.prototype.highlightParams = undefined;

  /**
   * @member {module:model/PaginationParams} paginationParams
   */
  exports.prototype.paginationParams = undefined;


  /**
   * Allowed values for the <code>suggestionType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SuggestionTypeEnum = {
    /**
     * value: "completion"
     * @const
     */
    completion: "completion",

    /**
     * value: "spellCorrection"
     * @const
     */
    spellCorrection: "spellCorrection"
  };

  return exports;

}));
