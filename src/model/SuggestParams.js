/**
 * Catalog API
 * This is the API for retrieving items from your catalog.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PaginationParams', 'model/SuggestHighlightParams', 'model/SuggestParamsSuggestionSource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./PaginationParams'), require('./SuggestHighlightParams'), require('./SuggestParamsSuggestionSource'));
  } else {
    // Browser globals (root is window)
    if (!root.UpliftCatalogClientJavascript) {
      root.UpliftCatalogClientJavascript = {};
    }
    root.UpliftCatalogClientJavascript.SuggestParams = factory(root.UpliftCatalogClientJavascript.ApiClient, root.UpliftCatalogClientJavascript.PaginationParams, root.UpliftCatalogClientJavascript.SuggestHighlightParams, root.UpliftCatalogClientJavascript.SuggestParamsSuggestionSource);
  }
}(this, function(ApiClient, PaginationParams, SuggestHighlightParams, SuggestParamsSuggestionSource) {
  'use strict';



  /**
   * The SuggestParams model module.
   * @module model/SuggestParams
   * @version 1.2.2
   */

  /**
   * Constructs a new <code>SuggestParams</code>.
   * @alias module:model/SuggestParams
   * @class
   * @param keyphrase {String} Query keyphrase. Empty keyphrase returns no result.
   * @param suggestionType {module:model/SuggestParams.SuggestionTypeEnum} Type of suggestion to be returned
   * @param suggestionSource {module:model/SuggestParamsSuggestionSource} 
   * @param language {String} Language iso code
   */
  var exports = function(keyphrase, suggestionType, suggestionSource, language) {
    var _this = this;

    _this['keyphrase'] = keyphrase;
    _this['suggestionType'] = suggestionType;
    _this['suggestionSource'] = suggestionSource;
    _this['language'] = language;
  };

  /**
   * Constructs a <code>SuggestParams</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SuggestParams} obj Optional instance to populate.
   * @return {module:model/SuggestParams} The populated <code>SuggestParams</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('keyphrase')) {
        obj['keyphrase'] = ApiClient.convertToType(data['keyphrase'], 'String');
      }
      if (data.hasOwnProperty('suggestionType')) {
        obj['suggestionType'] = ApiClient.convertToType(data['suggestionType'], 'String');
      }
      if (data.hasOwnProperty('suggestionSource')) {
        obj['suggestionSource'] = SuggestParamsSuggestionSource.constructFromObject(data['suggestionSource']);
      }
      if (data.hasOwnProperty('language')) {
        obj['language'] = ApiClient.convertToType(data['language'], 'String');
      }
      if (data.hasOwnProperty('highlightParams')) {
        obj['highlightParams'] = SuggestHighlightParams.constructFromObject(data['highlightParams']);
      }
      if (data.hasOwnProperty('paginationParams')) {
        obj['paginationParams'] = PaginationParams.constructFromObject(data['paginationParams']);
      }
    }
    return obj;
  }

  /**
   * Query keyphrase. Empty keyphrase returns no result.
   * @member {String} keyphrase
   */
  exports.prototype['keyphrase'] = undefined;
  /**
   * Type of suggestion to be returned
   * @member {module:model/SuggestParams.SuggestionTypeEnum} suggestionType
   */
  exports.prototype['suggestionType'] = undefined;
  /**
   * @member {module:model/SuggestParamsSuggestionSource} suggestionSource
   */
  exports.prototype['suggestionSource'] = undefined;
  /**
   * Language iso code
   * @member {String} language
   */
  exports.prototype['language'] = undefined;
  /**
   * @member {module:model/SuggestHighlightParams} highlightParams
   */
  exports.prototype['highlightParams'] = undefined;
  /**
   * @member {module:model/PaginationParams} paginationParams
   */
  exports.prototype['paginationParams'] = undefined;


  /**
   * Allowed values for the <code>suggestionType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SuggestionTypeEnum = {
    /**
     * value: "completion"
     * @const
     */
    "completion": "completion",
    /**
     * value: "spellCorrection"
     * @const
     */
    "spellCorrection": "spellCorrection"  };


  return exports;
}));


