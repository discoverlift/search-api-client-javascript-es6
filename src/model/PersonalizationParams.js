/**
 * Catalog API
 * This is the API for retrieving items from your catalog.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PersonalizationParams model module.
 * @module model/PersonalizationParams
 * @version 1.2.2
 */
class PersonalizationParams {
    /**
     * Constructs a new <code>PersonalizationParams</code>.
     * @alias module:model/PersonalizationParams
     */
    constructor() { 
        
        PersonalizationParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonalizationParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalizationParams} obj Optional instance to populate.
     * @return {module:model/PersonalizationParams} The populated <code>PersonalizationParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalizationParams();

            if (data.hasOwnProperty('userToken')) {
                obj['userToken'] = ApiClient.convertToType(data['userToken'], 'String');
            }
            if (data.hasOwnProperty('enablePersonalization')) {
                obj['enablePersonalization'] = ApiClient.convertToType(data['enablePersonalization'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * A token identifying the user. Only required if 'enablePersonalization' is 'true'
 * @member {String} userToken
 */
PersonalizationParams.prototype['userToken'] = undefined;

/**
 * Whether to enable personalization or not
 * @member {Boolean} enablePersonalization
 * @default false
 */
PersonalizationParams.prototype['enablePersonalization'] = false;






export default PersonalizationParams;

