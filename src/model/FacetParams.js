/**
 * Catalog API
 * This is the API for retrieving items from your catalog.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FacetParams model module.
 * @module model/FacetParams
 * @version 1.2.2
 */
class FacetParams {
    /**
     * Constructs a new <code>FacetParams</code>.
     * @alias module:model/FacetParams
     * @param attributes {Array.<String>} 
     */
    constructor(attributes) { 
        
        FacetParams.initialize(this, attributes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes) { 
        obj['attributes'] = attributes;
    }

    /**
     * Constructs a <code>FacetParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FacetParams} obj Optional instance to populate.
     * @return {module:model/FacetParams} The populated <code>FacetParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FacetParams();

            if (data.hasOwnProperty('maxFacets')) {
                obj['maxFacets'] = ApiClient.convertToType(data['maxFacets'], 'Number');
            }
            if (data.hasOwnProperty('maxValuePerFacet')) {
                obj['maxValuePerFacet'] = ApiClient.convertToType(data['maxValuePerFacet'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], ['String']);
            }
            if (data.hasOwnProperty('sortFacetValuesBy')) {
                obj['sortFacetValuesBy'] = ApiClient.convertToType(data['sortFacetValuesBy'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} maxFacets
 */
FacetParams.prototype['maxFacets'] = undefined;

/**
 * @member {Number} maxValuePerFacet
 */
FacetParams.prototype['maxValuePerFacet'] = undefined;

/**
 * @member {Array.<String>} attributes
 */
FacetParams.prototype['attributes'] = undefined;

/**
 * @member {module:model/FacetParams.SortFacetValuesByEnum} sortFacetValuesBy
 * @default 'count'
 */
FacetParams.prototype['sortFacetValuesBy'] = 'count';





/**
 * Allowed values for the <code>sortFacetValuesBy</code> property.
 * @enum {String}
 * @readonly
 */
FacetParams['SortFacetValuesByEnum'] = {

    /**
     * value: "alpha"
     * @const
     */
    "alpha": "alpha",

    /**
     * value: "count"
     * @const
     */
    "count": "count"
};



export default FacetParams;

