/*
 * Search API
 * This is the API for getting search results.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Document', 'model/FacetResponse', 'model/QueryPerformance', 'model/SearchParams'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Document'), require('./FacetResponse'), require('./QueryPerformance'), require('./SearchParams'));
  } else {
    // Browser globals (root is window)
    if (!root.UpliftSearchClientJavascript) {
      root.UpliftSearchClientJavascript = {};
    }
    root.UpliftSearchClientJavascript.SearchResponse = factory(root.UpliftSearchClientJavascript.ApiClient, root.UpliftSearchClientJavascript.Document, root.UpliftSearchClientJavascript.FacetResponse, root.UpliftSearchClientJavascript.QueryPerformance, root.UpliftSearchClientJavascript.SearchParams);
  }
}(this, function(ApiClient, Document, FacetResponse, QueryPerformance, SearchParams) {
  'use strict';

  /**
   * The SearchResponse model module.
   * @module model/SearchResponse
   * @version 1.1.0
   */

  /**
   * Constructs a new <code>SearchResponse</code>.
   * Response from a search request
   * @alias module:model/SearchResponse
   * @class
   * @param numResults {Number} 
   * @param results {Array.<module:model/Document>} 
   * @param performance {module:model/QueryPerformance} 
   */
  var exports = function(numResults, results, performance) {
    this.numResults = numResults;
    this.results = results;
    this.performance = performance;
  };

  /**
   * Constructs a <code>SearchResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SearchResponse} obj Optional instance to populate.
   * @return {module:model/SearchResponse} The populated <code>SearchResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('numResults'))
        obj.numResults = ApiClient.convertToType(data['numResults'], 'Number');
      if (data.hasOwnProperty('numPages'))
        obj.numPages = ApiClient.convertToType(data['numPages'], 'Number');
      if (data.hasOwnProperty('results'))
        obj.results = ApiClient.convertToType(data['results'], [Document]);
      if (data.hasOwnProperty('performance'))
        obj.performance = QueryPerformance.constructFromObject(data['performance']);
      if (data.hasOwnProperty('facets'))
        obj.facets = FacetResponse.constructFromObject(data['facets']);
      if (data.hasOwnProperty('searchParams'))
        obj.searchParams = SearchParams.constructFromObject(data['searchParams']);
    }
    return obj;
  }

  /**
   * @member {Number} numResults
   */
  exports.prototype.numResults = undefined;

  /**
   * Number of pages of content. Formula is ceiling(numResults/hitsPerPage)
   * @member {Number} numPages
   */
  exports.prototype.numPages = undefined;

  /**
   * @member {Array.<module:model/Document>} results
   */
  exports.prototype.results = undefined;

  /**
   * @member {module:model/QueryPerformance} performance
   */
  exports.prototype.performance = undefined;

  /**
   * @member {module:model/FacetResponse} facets
   */
  exports.prototype.facets = undefined;

  /**
   * @member {module:model/SearchParams} searchParams
   */
  exports.prototype.searchParams = undefined;

  return exports;

}));
