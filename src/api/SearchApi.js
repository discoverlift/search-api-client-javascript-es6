/**
 * Catalog API
 * This is the API for retrieving items from your catalog.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SearchRequest from '../model/SearchRequest';
import SearchResponse from '../model/SearchResponse';

/**
* Search service.
* @module api/SearchApi
* @version 1.2.2
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @param {module:model/SearchRequest} searchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchResponse} and HTTP response
     */
    searchCatalogWithHttpInfo(domainId, catalogId, searchRequest) {
      let postBody = searchRequest;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling searchCatalog");
      }
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling searchCatalog");
      }
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling searchCatalog");
      }

      let pathParams = {
        'domainId': domainId,
        'catalogId': catalogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchResponse;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/catalog/{catalogId}/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @param {module:model/SearchRequest} searchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SearchResponse}
     */
    searchCatalog(domainId, catalogId, searchRequest) {
      return this.searchCatalogWithHttpInfo(domainId, catalogId, searchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Options Call
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DomainDomainIdCatalogCatalogIdSearchOptionsWithHttpInfo(domainId, catalogId) {
      let postBody = null;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling v1DomainDomainIdCatalogCatalogIdSearchOptions");
      }
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling v1DomainDomainIdCatalogCatalogIdSearchOptions");
      }

      let pathParams = {
        'domainId': domainId,
        'catalogId': catalogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/catalog/{catalogId}/search', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Options Call
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DomainDomainIdCatalogCatalogIdSearchOptions(domainId, catalogId) {
      return this.v1DomainDomainIdCatalogCatalogIdSearchOptionsWithHttpInfo(domainId, catalogId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
