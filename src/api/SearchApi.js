/**
 * Catalog API
 * This is the API for retrieving items from your catalog.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SearchRequest', 'model/SearchResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SearchRequest'), require('../model/SearchResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UpliftCatalogClientJavascript) {
      root.UpliftCatalogClientJavascript = {};
    }
    root.UpliftCatalogClientJavascript.SearchApi = factory(root.UpliftCatalogClientJavascript.ApiClient, root.UpliftCatalogClientJavascript.SearchRequest, root.UpliftCatalogClientJavascript.SearchResponse);
  }
}(this, function(ApiClient, SearchRequest, SearchResponse) {
  'use strict';

  /**
   * Search service.
   * @module api/SearchApi
   * @version 1.2.2
   */

  /**
   * Constructs a new SearchApi. 
   * @alias module:api/SearchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @param {module:model/SearchRequest} searchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchResponse} and HTTP response
     */
    this.searchCatalogWithHttpInfo = function(domainId, catalogId, searchRequest) {
      var postBody = searchRequest;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling searchCatalog");
      }
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling searchCatalog");
      }
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling searchCatalog");
      }

      var pathParams = {
        'domainId': domainId,
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SearchResponse;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/catalog/{catalogId}/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @param {module:model/SearchRequest} searchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SearchResponse}
     */
    this.searchCatalog = function(domainId, catalogId, searchRequest) {
      return this.searchCatalogWithHttpInfo(domainId, catalogId, searchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Options Call
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v1DomainDomainIdCatalogCatalogIdSearchOptionsWithHttpInfo = function(domainId, catalogId) {
      var postBody = null;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling v1DomainDomainIdCatalogCatalogIdSearchOptions");
      }
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling v1DomainDomainIdCatalogCatalogIdSearchOptions");
      }

      var pathParams = {
        'domainId': domainId,
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/catalog/{catalogId}/search', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Options Call
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v1DomainDomainIdCatalogCatalogIdSearchOptions = function(domainId, catalogId) {
      return this.v1DomainDomainIdCatalogCatalogIdSearchOptionsWithHttpInfo(domainId, catalogId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
