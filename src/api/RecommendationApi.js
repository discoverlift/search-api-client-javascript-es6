/**
 * Catalog API
 * This is the API for retrieving items from your catalog.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RecommendationRequest', 'model/RecommendationResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RecommendationRequest'), require('../model/RecommendationResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UpliftCatalogClientJavascript) {
      root.UpliftCatalogClientJavascript = {};
    }
    root.UpliftCatalogClientJavascript.RecommendationApi = factory(root.UpliftCatalogClientJavascript.ApiClient, root.UpliftCatalogClientJavascript.RecommendationRequest, root.UpliftCatalogClientJavascript.RecommendationResponse);
  }
}(this, function(ApiClient, RecommendationRequest, RecommendationResponse) {
  'use strict';

  /**
   * Recommendation service.
   * @module api/RecommendationApi
   * @version 1.3.0
   */

  /**
   * Constructs a new RecommendationApi. 
   * @alias module:api/RecommendationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @param {module:model/RecommendationRequest} recommendationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecommendationResponse} and HTTP response
     */
    this.getRecommendationsWithHttpInfo = function(domainId, catalogId, recommendationRequest) {
      var postBody = recommendationRequest;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getRecommendations");
      }
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getRecommendations");
      }
      // verify the required parameter 'recommendationRequest' is set
      if (recommendationRequest === undefined || recommendationRequest === null) {
        throw new Error("Missing the required parameter 'recommendationRequest' when calling getRecommendations");
      }

      var pathParams = {
        'domainId': domainId,
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecommendationResponse;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/catalog/{catalogId}/recommendation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @param {module:model/RecommendationRequest} recommendationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecommendationResponse}
     */
    this.getRecommendations = function(domainId, catalogId, recommendationRequest) {
      return this.getRecommendationsWithHttpInfo(domainId, catalogId, recommendationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Options Call
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v1DomainDomainIdCatalogCatalogIdRecommendationOptionsWithHttpInfo = function(domainId, catalogId) {
      var postBody = null;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling v1DomainDomainIdCatalogCatalogIdRecommendationOptions");
      }
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling v1DomainDomainIdCatalogCatalogIdRecommendationOptions");
      }

      var pathParams = {
        'domainId': domainId,
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/catalog/{catalogId}/recommendation', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Options Call
     * @param {String} domainId Domain Id
     * @param {String} catalogId Catalog Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v1DomainDomainIdCatalogCatalogIdRecommendationOptions = function(domainId, catalogId) {
      return this.v1DomainDomainIdCatalogCatalogIdRecommendationOptionsWithHttpInfo(domainId, catalogId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
