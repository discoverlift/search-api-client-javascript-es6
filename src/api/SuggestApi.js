/*
 * Search API
 * This is the API for getting search results.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: ajit.singh@discoverlift.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SuggestRequest', 'model/SuggestResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SuggestRequest'), require('../model/SuggestResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UpliftSearchClientJavascript) {
      root.UpliftSearchClientJavascript = {};
    }
    root.UpliftSearchClientJavascript.SuggestApi = factory(root.UpliftSearchClientJavascript.ApiClient, root.UpliftSearchClientJavascript.SuggestRequest, root.UpliftSearchClientJavascript.SuggestResponse);
  }
}(this, function(ApiClient, SuggestRequest, SuggestResponse) {
  'use strict';

  /**
   * Suggest service.
   * @module api/SuggestApi
   * @version 1.1.0
   */

  /**
   * Constructs a new SuggestApi. 
   * @alias module:api/SuggestApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {String} catalogId 
     * @param {String} domainId 
     * @param {module:model/SuggestRequest} suggestRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuggestResponse} and HTTP response
     */
    this.suggestWithHttpInfo = function(catalogId, domainId, suggestRequest) {
      var postBody = suggestRequest;

      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling suggest");
      }

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling suggest");
      }

      // verify the required parameter 'suggestRequest' is set
      if (suggestRequest === undefined || suggestRequest === null) {
        throw new Error("Missing the required parameter 'suggestRequest' when calling suggest");
      }


      var pathParams = {
        'catalogId': catalogId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuggestResponse;

      return this.apiClient.callApi(
        '/v1/domain/{domainId}/catalog/{catalogId}/suggest', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} catalogId 
     * @param {String} domainId 
     * @param {module:model/SuggestRequest} suggestRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SuggestResponse}
     */
    this.suggest = function(catalogId, domainId, suggestRequest) {
      return this.suggestWithHttpInfo(catalogId, domainId, suggestRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Options Call
     * @param {String} catalogId 
     * @param {String} domainId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v1DomainDomainIdCatalogCatalogIdSuggestOptionsWithHttpInfo = function(catalogId, domainId) {
      var postBody = null;

      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling v1DomainDomainIdCatalogCatalogIdSuggestOptions");
      }

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling v1DomainDomainIdCatalogCatalogIdSuggestOptions");
      }


      var pathParams = {
        'catalogId': catalogId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/domain/{domainId}/catalog/{catalogId}/suggest', 'OPTIONS',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Options Call
     * @param {String} catalogId 
     * @param {String} domainId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v1DomainDomainIdCatalogCatalogIdSuggestOptions = function(catalogId, domainId) {
      return this.v1DomainDomainIdCatalogCatalogIdSuggestOptionsWithHttpInfo(catalogId, domainId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
